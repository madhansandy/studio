/**
 * @fileoverview Firestore Security Rules for MediCheck AI.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has complete control over their own data, and no user can access another user's data.
 *
 * Data Structure:
 * All user-related data is nested under the `/users/{userId}` path. This includes user profiles, prescriptions, medications, health trends, and chat messages.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations are restricted to the owner of the data.
 *
 * Denormalization for Authorization:
 * The `userId` field in subcollection documents is used to enforce ownership and must match the `userId` in the path.
 *
 * Structural Segregation:
 * Private user data is stored in user-specific subcollections to ensure privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @allow (get) User with ID 'user123' can get their own profile.
     * @deny (get) User with ID 'user456' cannot get the profile with ID 'user123'.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @deny (update) User with ID 'user456' cannot update the profile with ID 'user123'.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (delete) User with ID 'user456' cannot delete the profile with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for prescriptions.
     * @path /users/{userId}/prescriptions/{prescriptionId}
     * @allow (create) User with ID 'user123' can create a prescription under their profile.
     * @deny (create) User with ID 'user456' cannot create a prescription under user123's profile.
     * @allow (get) User with ID 'user123' can get their own prescription.
     * @deny (get) User with ID 'user456' cannot get the prescription under user123's profile.
     * @allow (update) User with ID 'user123' can update their own prescription.
     * @deny (update) User with ID 'user456' cannot update the prescription under user123's profile.
     * @allow (delete) User with ID 'user123' can delete their own prescription.
     * @deny (delete) User with ID 'user456' cannot delete the prescription under user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/prescriptions/{prescriptionId} {
       function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for medications.
     * @path /users/{userId}/medications/{medicationId}
     * @allow (create) User with ID 'user123' can create a medication under their profile.
     * @deny (create) User with ID 'user456' cannot create a medication under user123's profile.
     * @allow (get) User with ID 'user123' can get their own medication.
     * @deny (get) User with ID 'user456' cannot get the medication under user123's profile.
     * @allow (update) User with ID 'user123' can update their own medication.
     * @deny (update) User with ID 'user456' cannot update the medication under user123's profile.
     * @allow (delete) User with ID 'user123' can delete their own medication.
     * @deny (delete) User with ID 'user456' cannot delete the medication under user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/medications/{medicationId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for health trends.
     * @path /users/{userId}/healthTrends/{healthTrendId}
     * @allow (create) User with ID 'user123' can create a health trend under their profile.
     * @deny (create) User with ID 'user456' cannot create a health trend under user123's profile.
     * @allow (get) User with ID 'user123' can get their own health trend.
     * @deny (get) User with ID 'user456' cannot get the health trend under user123's profile.
     * @allow (update) User with ID 'user123' can update their own health trend.
     * @deny (update) User with ID 'user456' cannot update the health trend under user123's profile.
     * @allow (delete) User with ID 'user123' can delete their own health trend.
     * @deny (delete) User with ID 'user456' cannot delete the health trend under user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/healthTrends/{healthTrendId} {
     function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for chat messages.
     * @path /users/{userId}/chatMessages/{chatMessageId}
     * @allow (create) User with ID 'user123' can create a chat message under their profile.
     * @deny (create) User with ID 'user456' cannot create a chat message under user123's profile.
     * @allow (get) User with ID 'user123' can get their own chat message.
     * @deny (get) User with ID 'user456' cannot get the chat message under user123's profile.
     * @allow (update) User with ID 'user123' can update their own chat message.
     * @deny (update) User with ID 'user456' cannot update the chat message under user123's profile.
     * @allow (delete) User with ID 'user123' can delete their own chat message.
     * @deny (delete) User with ID 'user456' cannot delete the chat message under user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/chatMessages/{chatMessageId} {
     function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}