/**
 * @fileOverview Firestore Security Rules for MediCheck AI.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user (patient)
 * can only access data associated with their unique user ID. All data is nested
 * under /users/{userId} to achieve path-based authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores patient profile information.
 * - /users/{userId}/prescriptions/{prescriptionId}: Stores prescriptions uploaded by the patient.
 * - /users/{userId}/medications/{medicationId}: Stores medications in the patient's inventory.
 * - /users/{userId}/alerts/{alertId}: Stores alerts for medications.
 *
 * Key Security Decisions:
 * - All data is private and accessible only to the authenticated user with a
 *   matching userId.
 * - The rules avoid the need for 'get()' calls by enforcing path-based
 *   authorization.
 * - The 'patientId' field in subcollections is for data linkage and is NOT used
 *   for authorization decisions.
 * - Listing operations are restricted to the owner of the user ID.
 * - The 'id' fields in the documents must match the document ID in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the given userId matches the authenticated user's ID.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the given userId matches the authenticated user's ID and the resource exists.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user ID matches and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    match /users/{userId} {
      /**
       * @description Manages patient profile information, ensuring only the authenticated user can access their own profile.
       * @path /users/{userId}
       * @allow (create) - User with UID 'user_abc' can create their profile with id: 'user_abc'.
       * @allow (get) - User with UID 'user_abc' can get their profile with ID 'user_abc'.
       * @allow (update) - User with UID 'user_abc' can update their profile with ID 'user_abc'.
       * @allow (delete) - User with UID 'user_abc' can delete their profile with ID 'user_abc'.
       * @deny (create) - User with UID 'user_xyz' cannot create a profile with id: 'user_abc'.
       * @principle Enforces document ownership for writes.
       */
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    match /users/{userId}/prescriptions/{prescriptionId} {
      /**
       * @description Manages patient prescriptions, allowing only the authenticated user to access their own prescriptions.
       * @path /users/{userId}/prescriptions/{prescriptionId}
       * @allow (create) - User with UID 'user_abc' can create a prescription with patientId: 'user_abc'.
       * @allow (get) - User with UID 'user_abc' can get prescription with ID 'prescription_123' in /users/user_abc/prescriptions/.
       * @allow (update) - User with UID 'user_abc' can update prescription with ID 'prescription_123' in /users/user_abc/prescriptions/.
       * @allow (delete) - User with UID 'user_abc' can delete prescription with ID 'prescription_123' in /users/user_abc/prescriptions/.
       * @deny (create) - User with UID 'user_xyz' cannot create a prescription with patientId: 'user_abc'.
       * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
       */
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.patientId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.patientId == userId;
      allow delete: if isExistingOwner(userId);
    }

    match /users/{userId}/medications/{medicationId} {
      /**
       * @description Manages patient medications, allowing only the authenticated user to access their own medications.
       * @path /users/{userId}/medications/{medicationId}
       * @allow (create) - User with UID 'user_abc' can create a medication with patientId: 'user_abc'.
       * @allow (get) - User with UID 'user_abc' can get medication with ID 'medication_456' in /users/user_abc/medications/.
       * @allow (update) - User with UID 'user_abc' can update medication with ID 'medication_456' in /users/user_abc/medications/.
       * @allow (delete) - User with UID 'user_abc' can delete medication with ID 'medication_456' in /users/user_abc/medications/.
       * @deny (create) - User with UID 'user_xyz' cannot create a medication with patientId: 'user_abc'.
       * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
       */
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.patientId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.patientId == userId;
      allow delete: if isExistingOwner(userId);
    }

    match /users/{userId}/alerts/{alertId} {
      /**
       * @description Manages patient alerts, allowing only the authenticated user to access their own alerts.
       * @path /users/{userId}/alerts/{alertId}
       * @allow (create) - User with UID 'user_abc' can create an alert with medicationId referencing a medication owned by 'user_abc'.
       * @allow (get) - User with UID 'user_abc' can get alert with ID 'alert_789' in /users/user_abc/alerts/.
       * @allow (update) - User with UID 'user_abc' can update alert with ID 'alert_789' in /users/user_abc/alerts/.
       * @allow (delete) - User with UID 'user_abc' can delete alert with ID 'alert_789' in /users/user_abc/alerts/.
       * @deny (create) - User with UID 'user_xyz' cannot create an alert for user_abc's medication.
       * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
       */
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}