/**
 * @file Firebase Security Rules for MediCheck AI Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Each user (patient)
 *  has complete control over their data stored under their unique `/users/{userId}` path.
 *  Authorization is path-based, eliminating the need for costly `get()` calls within rules.
 *
 * @data_structure All patient-related data (prescriptions, medications, alerts) is nested
 *  under the `/users/{userId}` collection. This ensures that each user's data is isolated
 *  and accessible only to them.
 *
 * @key_security_decisions
 *   - User listing is implicitly denied.
 *   - `patientId` fields are used for data linkage but are not considered during authorization. Authorization happens based on the user ID in the path.
 *
 * @denormalization_for_authorization N/A - Authorization is achieved with path-based ownership
 *
 * @structural_segregation N/A - All user data lives under their respective sub-tree.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner of the resource (patient).
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @returns {bool} True if the user ID matches the request's authentication UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in
     * @returns {bool} True if the user is signed in.
     */
    function isSignedIn() {
        return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner and the document exists.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @returns {bool} True if the user ID matches the request's authentication UID and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description
     * Provides access control for user profile documents.
     * Only the authenticated user with the matching `userId` can read or write their profile.
     *
     * @path /users/{userId}
     * @allow (get, create, update, delete) User YJzyo6jefNfDiCswc0W2cZs76ej1 can access /users/YJzyo6jefNfDiCswc0W2cZs76ej1 if authenticated.
     * @deny (get, create, update, delete) User abc cannot access /users/YJzyo6jefNfDiCswc0W2cZs76ej1 because they are not the owner.
     * @principle Enforces document ownership and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description
     * Provides access control for prescription documents within a user's profile.
     * Only the authenticated user with the matching `userId` can read or write their prescriptions.
     *
     * @path /users/{userId}/prescriptions/{prescriptionId}
     * @allow (get, create, update, delete) User YJzyo6jefNfDiCswc0W2cZs76ej1 can access /users/YJzyo6jefNfDiCswc0W2cZs76ej1/prescriptions/somePrescription if authenticated.
     * @deny (get, create, update, delete) User abc cannot access /users/YJzyo6jefNfDiCswc0W2cZs76ej1/prescriptions/somePrescription because they are not the owner.
     * @principle Enforces document ownership and restricts access to a user's own prescriptions.
     */
    match /users/{userId}/prescriptions/{prescriptionId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

        /**
     * @description
     * Provides access control for chatMessages documents within a user's profile.
     * Only the authenticated user with the matching `userId` can read or write their chatMessages.
     *
     * @path /users/{userId}/chatMessages/{chatMessagesId}
     * @allow (get, create, update, delete) User YJzyo6jefNfDiCswc0W2cZs76ej1 can access /users/YJzyo6jefNfDiCswc0W2cZs76ej1/chatMessages/someChatMessage if authenticated.
     * @deny (get, create, update, delete) User abc cannot access /users/YJzyo6jefNfDiCswc0W2cZs76ej1/chatMessages/someChatMessage because they are not the owner.
     * @principle Enforces document ownership and restricts access to a user's own chatMessages.
     */
    match /users/{userId}/chatMessages/{chatMessagesId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description
     * Provides access control for medication documents within a user's profile.
     * Only the authenticated user with the matching `userId` can read or write their medications.
     *
     * @path /users/{userId}/medications/{medicationId}
     * @allow (get, create, update, delete) User YJzyo6jefNfDiCswc0W2cZs76ej1 can access /users/YJzyo6jefNfDiCswc0W2cZs76ej1/medications/someMedication if authenticated.
     * @deny (get, create, update, delete) User abc cannot access /users/YJzyo6jefNfDiCswc0W2cZs76ej1/medications/someMedication because they are not the owner.
     * @principle Enforces document ownership and restricts access to a user's own medications.
     */
    match /users/{userId}/medications/{medicationId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description
     * Provides access control for alert documents within a user's profile.
     * Only the authenticated user with the matching `userId` can read or write their alerts.
     *
     * @path /users/{userId}/alerts/{alertId}
     * @allow (get, create, update, delete) User YJzyo6jefNfDiCswc0W2cZs76ej1 can access /users/YJzyo6jefNfDiCswc0W2cZs76ej1/alerts/someAlert if authenticated.
     * @deny (get, create, update, delete) User abc cannot access /users/YJzyo6jefNfDiCswc0W2cZs76ej1/alerts/someAlert because they are not the owner.
     * @principle Enforces document ownership and restricts access to a user's own alerts.
     */
    match /users/{userId}/alerts/{alertId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}