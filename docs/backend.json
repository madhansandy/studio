{
  "entities": {
    "Patient": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Patient",
      "type": "object",
      "description": "Represents a patient using the MediCheck AI application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the patient.",
          "format": "uuid"
        },
        "email": {
          "type": "string",
          "description": "Email address of the patient.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the patient."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the patient."
        },
        "dateOfBirth": {
          "type": "string",
          "description": "Date of birth of the patient.",
          "format": "date"
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "dateOfBirth"
      ]
    },
    "Prescription": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Prescription",
      "type": "object",
      "description": "Represents a prescription uploaded by a patient.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the prescription.",
          "format": "uuid"
        },
        "patientId": {
          "type": "string",
          "description": "Reference to Patient. (Relationship: Patient 1:N Prescription)"
        },
        "uploadDate": {
          "type": "string",
          "description": "Date when the prescription was uploaded.",
          "format": "date-time"
        },
        "prescriptionText": {
          "type": "string",
          "description": "Text content of the prescription (e.g., transcribed from an image)."
        },
        "prescriptionSafetyScore": {
          "type": "number",
          "description": "Prescription safety score generated by the AI tool."
        },
        "dosageIssues": {
          "type": "string",
          "description": "Any identified dosage issues in the prescription."
        },
        "drugConflicts": {
          "type": "string",
          "description": "Any identified drug conflicts in the prescription."
        }
      },
      "required": [
        "id",
        "patientId",
        "uploadDate",
        "prescriptionText",
        "prescriptionSafetyScore"
      ]
    },
    "Medication": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Medication",
      "type": "object",
      "description": "Represents a medication in a patient's inventory.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the medication.",
          "format": "uuid"
        },
        "patientId": {
          "type": "string",
          "description": "Reference to Patient. (Relationship: Patient 1:N Medication)"
        },
        "name": {
          "type": "string",
          "description": "Name of the medication."
        },
        "expiryDate": {
          "type": "string",
          "description": "Expiry date of the medication.",
          "format": "date"
        },
        "stockQuantity": {
          "type": "number",
          "description": "Current stock quantity of the medication."
        },
        "alertThreshold": {
          "type": "number",
          "description": "Threshold at which a stock alert should be triggered."
        }
      },
      "required": [
        "id",
        "patientId",
        "name",
        "expiryDate",
        "stockQuantity",
        "alertThreshold"
      ]
    },
    "Alert": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Alert",
      "type": "object",
      "description": "Represents an alert for a medication.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the alert.",
          "format": "uuid"
        },
        "medicationId": {
          "type": "string",
          "description": "Reference to Medication. (Relationship: Medication 1:N Alert)"
        },
        "alertType": {
          "type": "string",
          "description": "Type of alert (e.g., expiry, low stock)."
        },
        "alertDate": {
          "type": "string",
          "description": "Date when the alert was triggered.",
          "format": "date-time"
        },
        "message": {
          "type": "string",
          "description": "Message associated with the alert."
        }
      },
      "required": [
        "id",
        "medicationId",
        "alertType",
        "alertDate",
        "message"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "Patient",
          "schema": {
            "$ref": "#/backend/entities/Patient"
          },
          "description": "Stores patient profile information.  Accessible only to the authenticated user with matching userId.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user (patient)."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/prescriptions/{prescriptionId}",
        "definition": {
          "entityName": "Prescription",
          "schema": {
            "$ref": "#/backend/entities/Prescription"
          },
          "description": "Stores prescriptions uploaded by the patient. Accessible only to the authenticated user with matching userId.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user (patient)."
            },
            {
              "name": "prescriptionId",
              "description": "The unique identifier for the prescription."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/medications/{medicationId}",
        "definition": {
          "entityName": "Medication",
          "schema": {
            "$ref": "#/backend/entities/Medication"
          },
          "description": "Stores medications in the patient's inventory. Accessible only to the authenticated user with matching userId.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user (patient)."
            },
            {
              "name": "medicationId",
              "description": "The unique identifier for the medication."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/alerts/{alertId}",
        "definition": {
          "entityName": "Alert",
          "schema": {
            "$ref": "#/backend/entities/Alert"
          },
          "description": "Stores alerts for medications. Accessible only to the authenticated user with matching userId.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user (patient)."
            },
            {
              "name": "alertId",
              "description": "The unique identifier for the alert."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence, support QAPs, and maintain data integrity.  We leverage path-based ownership for user-specific data (Patients, Prescriptions, Medications, Alerts). Specifically, all data related to a patient is stored under a collection named `/users/{userId}`, which ensures that only the authenticated user (patient) has access to their data. The 'patientId' field is included in `Prescription`, `Medication`, and `Alert` documents but primarily serves as data linkage and does not factor into authorization rules. This avoids the need for `get()` calls in security rules, enabling atomic operations and simplifying debugging.\n\nThe structure supports QAPs because listing prescriptions, medications, or alerts is scoped to a specific user's path. Security rules can easily enforce that only the authenticated user can list documents under their own `/users/{userId}` path. The structure avoids mixing data with different access needs, as all data within a user's path is considered private to that user.\n\nAuthorization Independence (CRITICAL): By using path-based ownership, we eliminate the need to fetch parent document data to determine access. Each user's data is isolated under their unique ID.\n\nQAPs (Rules are not Filters): Secure list operations are enabled because we can restrict access based on the path. Listing prescriptions, for example, will only return the prescriptions belonging to the authenticated user, as it's scoped to their user ID."
  }
}